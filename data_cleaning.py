import mysql.connector
import pandas as pd

# üìå Connexion √† MySQL et chargement des donn√©es brutes
def load_data_from_mysql():
    """
    Je r√©cup√®re les donn√©es brutes depuis MySQL et les charge dans un DataFrame Pandas.
    """
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="mamadou",  # Mon mot de passe MySQL
            database="scraping_db"
        )

        # J'ex√©cute une requ√™te pour r√©cup√©rer tous les produits
        query = "SELECT * FROM produits"
        df = pd.read_sql(query, conn)

        conn.close()
        print("‚úÖ Donn√©es charg√©es depuis MySQL.")
        return df

    except mysql.connector.Error as e:
        print(f"‚ùå Erreur MySQL : {e}")
        return None


# üìå Nettoyage des donn√©es pour les rendre exploitables
def clean_data(df):
    """
    Ici, je nettoie les donn√©es du DataFrame pour √©viter les erreurs et les incoh√©rences :
    - Suppression des doublons
    - Suppression des espaces inutiles
    - Conversion en minuscules pour standardiser
    - Nettoyage des prix en convertissant en float
    - Remplacement des valeurs nulles et vides dans rating et infos_livraison
    """
    print("üîÑ Nettoyage des donn√©es en cours...")

    # Suppression des doublons (je me base sur le nom du produit)
    df.drop_duplicates(subset=["nom_produit"], inplace=True)

    # Je supprime les espaces inutiles et mets tout en minuscules pour normaliser
    df["marque"] = df["marque"].str.strip().str.lower()
    df["nom_produit"] = df["nom_produit"].str.strip().str.lower()

    # ‚ö†Ô∏è Correction : Remplacement des valeurs NULL ou vides avant de normaliser
    df["infos_livraison"] = df["infos_livraison"].fillna("").astype(str)  # Conversion en string obligatoire
    df["infos_livraison"] = df["infos_livraison"].replace("", "non sp√©cifi√©")  # Je remplace les champs vides
    df["infos_livraison"] = df["infos_livraison"].str.strip()  # Nettoyage des espaces

    # Nettoyage des prix : suppression des symboles, conversion en float
    df["prix"] = df["prix"].str.replace("‚Ç¨", "").str.replace(",", ".").astype(float)

    # Je remplace les valeurs NULL ou vides dans `rating` par "0"
    df["rating"] = df["rating"].replace("", "0")  # Gestion des cha√Ænes vides
    df["rating"] = df["rating"].fillna("0")  # Gestion des valeurs NULL

    print("‚úÖ Nettoyage termin√©.")
    return df


# üìå Sauvegarde des donn√©es nettoy√©es (CSV + MySQL)
def save_cleaned_data(df, to_mysql=True):
    """
    J'enregistre les donn√©es propres dans un fichier CSV et, si n√©cessaire, dans MySQL.
    """
    df.to_csv("cleaned_products.csv", index=False, encoding="utf-8-sig", sep=";")
    print("üìÇ Donn√©es nettoy√©es sauvegard√©es en CSV.")

    if to_mysql:
        try:
            conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="mamadou",
                database="scraping_db"
            )
            cursor = conn.cursor()

            # Pour √©viter d'accumuler de la donn√©e en double, je recr√©e une table propre
            cursor.execute("DROP TABLE IF EXISTS produits_clean;")
            cursor.execute("""
                CREATE TABLE produits_clean (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    marque VARCHAR(255),
                    nom_produit VARCHAR(255),
                    lien TEXT,
                    prix FLOAT,
                    rating VARCHAR(50) DEFAULT '0',
                    infos_livraison VARCHAR(255) DEFAULT 'non sp√©cifi√©'
                )
            """)

            # V√©rification : s'assurer que toutes les colonnes sont bien pr√©sentes
            cleaned_data = df[["marque", "nom_produit", "lien", "prix", "rating", "infos_livraison"]].values.tolist()

            # Insertion des donn√©es dans MySQL
            sql = """
            INSERT INTO produits_clean (marque, nom_produit, lien, prix, rating, infos_livraison)
            VALUES (%s, %s, %s, %s, %s, %s)
            """
            cursor.executemany(sql, cleaned_data)
            conn.commit()

            print("‚úÖ Donn√©es nettoy√©es ins√©r√©es dans MySQL (table `produits_clean`).")

        except mysql.connector.Error as e:
            print(f"‚ùå Erreur MySQL : {e}")

        finally:
            if 'cursor' in locals() and cursor:
                cursor.close()
            if 'conn' in locals() and conn:
                conn.close()


# üìå Ex√©cution compl√®te : Chargement ‚Üí Nettoyage ‚Üí Sauvegarde
def main():
    # Je r√©cup√®re les donn√©es brutes depuis MySQL
    df = load_data_from_mysql()
    
    if df is not None:
        # Nettoyage en profondeur des donn√©es
        df_cleaned = clean_data(df)

        # V√©rification rapide apr√®s nettoyage
        print(df_cleaned[df_cleaned["infos_livraison"] == "non sp√©cifi√©"])  # V√©rifier que les valeurs NULL sont bien remplac√©es
        print(df_cleaned[df_cleaned["rating"] == "0"])  # V√©rifier que le rating est bien remplac√©

        # Sauvegarde des donn√©es nettoy√©es
        save_cleaned_data(df_cleaned)


if __name__ == "__main__":
    main()
